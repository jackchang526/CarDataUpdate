<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BitAuto.Services.Dal.SqlClient</name>
    </assembly>
    <members>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserWithCarValue"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userWithCarValue">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserWithCarValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserWithCarValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserWithCarValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserWithCarValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.GetByUserWithCarValue(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserWithCarValue index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userWithCarValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserWithCarValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.GetByValueName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_UserWithCarValue_ValueName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="valueName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserWithCarValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserWithCarValue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserWithCarValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserWithCarValue)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserWithCarValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserWithCarValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserWithCarValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserWithCarValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserWithCarValue object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserWithCarValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoCommon"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCommon objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCommon objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCommon objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCommon objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserInfoCommon index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserInfoCommon"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByUserName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByUserApplicationIdUserName(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_UserInfoCommon_UserApplicationID_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userApplicationId"></param>
            <param name="userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserInfoCommon"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByCreateTime(BitAuto.Services.Dal.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_CreateTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="createTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByLastChangeTime(BitAuto.Services.Dal.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_LastChangeTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="lastChangeTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByTrueName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_TrueName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="trueName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByEmail(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="email"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.GetByMobilePhone(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCommon_MobilePhone index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="mobilePhone"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserInfoCommon})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoCommon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoCommon)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserInfoCommon object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoCommon object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoCommon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoCommon)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoCommon object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserInfoCommon object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionInfo"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="exceptionInfoId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetByProjectId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Project_ExceptionInfo_FK key.
            	Project_ExceptionInfo_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetByExceptionInfoId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ExceptionInfo_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="exceptionInfoId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogExceptionInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetByExceptionHash(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_SysLogExceptionInfo_ExceptionHash index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="exceptionHash"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogExceptionInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetByLastGenerateTime(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SysLogExceptionInfo_LastGenerateTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="lastGenerateTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.GetByLastSendMailTime(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SysLogExceptionInfo_LastSendMailTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="lastSendMailTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogExceptionInfo})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogExceptionInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogExceptionInfo)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogExceptionInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogExceptionInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogExceptionInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogExceptionInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogExceptionInfo object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogExceptionInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogEnumType"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="enumTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogEnumType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogEnumType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogEnumType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogEnumType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.GetByEnumTypeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SysLogEnumType index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="enumTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogEnumType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.GetByEnumTypeValue(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_SysLogEnumType_EnumTypeValue index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="enumTypeValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogEnumType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogEnumType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogEnumType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogEnumType)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogEnumType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogEnumType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogEnumType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogEnumType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogEnumType object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogEnumType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.BusiCodeSchema"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.BusiCodeSchema"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="busiCodeSchemaId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="updateTime">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCodeSchema objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCodeSchema objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCodeSchema objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCodeSchema objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.GetByBusiCodeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the BusiCode_CodeSchema_FK key.
            	BusiCode_CodeSchema_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="busiCodeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCodeSchema objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.GetByBusiCodeSchemaId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CodeSchema index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="busiCodeSchemaId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.BusiCodeSchema"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.GetByBusiCodeIdBeginCode(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Uni_CodeSchema_BeginCode index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="busiCodeId"></param>
            <param name="beginCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.BusiCodeSchema"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.BusiCodeSchema})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.BusiCodeSchema object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.BusiCodeSchema)">
            <summary>
            	Inserts a BitAuto.Services.Entities.BusiCodeSchema object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.BusiCodeSchema object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.BusiCodeSchema object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.BusiCodeSchema)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.BusiCodeSchema object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.BusiCodeSchema object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeSchemaProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.BusiCode"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Byte[])">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="busiCodeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="updateTime">The timestamp field used for concurrency check.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
            <exception cref="T:System.Data.DBConcurrencyException">The record has been modified by an other user. Please reload the instance before deleting.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCode objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCode objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.BusiCode objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.GetByBusiCodeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BusiCode index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="busiCodeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.BusiCode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.GetByCodeName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Uni_BusiCode_CodeName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="codeName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.BusiCode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.BusiCode})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.BusiCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.BusiCode)">
            <summary>
            	Inserts a BitAuto.Services.Entities.BusiCode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.BusiCode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.BusiCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.BusiCode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.BusiCode object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.BusiCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.PersonalBaaInfo"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="cmuId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.PersonalBaaInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.PersonalBaaInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.PersonalBaaInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.PersonalBaaInfo objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.GetByCmuId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Personal_BAA_Info_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="cmuId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.PersonalBaaInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.PersonalBaaInfo})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.PersonalBaaInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.PersonalBaaInfo)">
            <summary>
            	Inserts a BitAuto.Services.Entities.PersonalBaaInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.PersonalBaaInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.PersonalBaaInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.PersonalBaaInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.PersonalBaaInfo object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.PersonalBaaInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorRole"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorRole"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorRoleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRole objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRole objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRole objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetBySysBelongTo(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorRole_AuthorResource key.
            	FK_AuthorRole_AuthorResource Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="sysBelongTo"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRole objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetByAuthorRoleId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorRole index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorRole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetBySysBelongToRoleName(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorRole_SystemBelongTo_RoleName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="sysBelongTo"></param>
            <param name="roleName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorRole"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.GetByRoleMaster(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorRole_RoleMaster index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="roleMaster"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorRole})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorRole)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorRole object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorRole object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorRole)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorRole object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorRole object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserApplication"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userApplicationId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserApplication objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserApplication objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserApplication objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserApplication objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.GetByUserApplicationId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserApplication index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userApplicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserApplication"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.GetByApplicationName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Application_ApplicationName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="applicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserApplication})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserApplication object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserApplication)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserApplication object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserApplication object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserApplication object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserApplication)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserApplication object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserApplication object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.OperationLog"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="optId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationLog objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationLog objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationLog objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationLog objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetByOptId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OperationLog_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="optId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.OperationLog"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetByUserName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_OperationLog_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetByClientIp(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_OperationLog_ClientIP index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="clientIp"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetByOccurredTime(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_OperationLog_OccurredTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="occurredTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.GetByResourceUrl(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_OperationLog_ResourceUrl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceUrl"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.OperationLog})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.OperationLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.OperationLog)">
            <summary>
            	Inserts a BitAuto.Services.Entities.OperationLog object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.OperationLog object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.OperationLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.OperationLog)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.OperationLog object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.OperationLog object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationLogProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResourceType"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorResourceTypeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceType objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.GetByAuthorResourceTypeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ResourceType index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorResourceTypeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResourceType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.GetByResourceTypeValue(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_ResourceType_ResourceTypeValue index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceTypeValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResourceType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorResourceType})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResourceType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResourceType)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorResourceType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResourceType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResourceType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResourceType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResourceType object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorResourceType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoCore"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoCore"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCore objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCore objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCore objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoCore objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetByUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserInfoCore index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserInfoCore"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetByTrueName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCore_TrueName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="trueName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetByEmail(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCore_Email index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="email"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.GetByMobilePhone(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoCore_MobilePhone index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="mobilePhone"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserInfoCore})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoCore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoCore)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserInfoCore object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoCore object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoCore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoCore)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoCore object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserInfoCore object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogImportantPage"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="imptPageId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogImportantPage objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogImportantPage objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogImportantPage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogImportantPage objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.GetByProjectId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SysLogProject_SysLogImportantPage_FK1 key.
            	SysLogProject_SysLogImportantPage_FK1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogImportantPage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.GetByImptPageId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SysLogImportantPage_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="imptPageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogImportantPage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.GetByWholeUrl(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SysLogImportantPage_WholeUrl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="wholeUrl"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogImportantPage})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogImportantPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogImportantPage)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogImportantPage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogImportantPage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogImportantPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogImportantPage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogImportantPage object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogImportantPage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorWebsiteUrl"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorWebsiteUrl"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorWebsiteUrlId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorWebsiteUrl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorWebsiteUrl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorWebsiteUrl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorWebsiteUrl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.GetByAuthorWebsiteUrlId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorWebsiteUrl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorWebsiteUrlId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorWebsiteUrl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.GetByWebsiteUrl(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorWebsiteUrl_WebsiteUrl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="websiteUrl"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorWebsiteUrl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.GetByAuthorResourceId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorWebsiteUrl_AuthorResourceId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorResourceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorWebsiteUrl})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorWebsiteUrl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorWebsiteUrl)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorWebsiteUrl object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorWebsiteUrl object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorWebsiteUrl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorWebsiteUrl)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorWebsiteUrl object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorWebsiteUrl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorWebsiteUrlProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.PersonalBaaInfo"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlPersonalBaaInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResourceAcl"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorResourceAclId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceAcl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResourceAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetByAuthorResourceAclId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorResourceAcl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorResourceAclId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResourceAcl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetByAuthorRoleIdResourceCode(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorRoleAcl_AuthorRoleId_AuthorResourceId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="resourceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResourceAcl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetByResourceCode(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorRoleAcl_ResourceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.GetByAuthorRoleId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorRoleAcl_AuthorRoleId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorResourceAcl})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResourceAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResourceAcl)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorResourceAcl object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResourceAcl object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResourceAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResourceAcl)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResourceAcl object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorResourceAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataCategory"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorDataCategoryId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataCategory objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataCategory objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataCategory objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.GetBySysBelongTo(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorDataCategory_AuthorResource key.
            	FK_AuthorDataCategory_AuthorResource Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="sysBelongTo"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataCategory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.GetByAuthorDataCategoryId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorDataCategory index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataCategoryId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorDataCategory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorDataCategory})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataCategory)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorDataCategory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataCategory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataCategory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataCategory object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorDataCategory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,BitAuto.Services.Dal.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:BitAuto.Services.Dal.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:BitAuto.Services.Dal.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:BitAuto.Services.Dal.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionTime"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="exceptionTimeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionTime objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionTime objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionTime objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionTime objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.GetByExceptionInfoId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ExceptionInfo_ExceptionTime_FK key.
            	ExceptionInfo_ExceptionTime_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="exceptionInfoId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogExceptionTime objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.GetByExceptionTimeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ExceptionTime_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="exceptionTimeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogExceptionTime"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.GetByGenerateTime(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SysLogExceptionTime_GenerateTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="generateTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogExceptionTime})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogExceptionTime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogExceptionTime)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogExceptionTime object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogExceptionTime object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogExceptionTime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogExceptionTime)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogExceptionTime object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogExceptionTime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogNoticeReceiver"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogNoticeReceiver"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="noticeReceiverId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogNoticeReceiver objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogNoticeReceiver objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogNoticeReceiver objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogNoticeReceiver objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.GetByProjectId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Project_NoticeReceive_FK key.
            	Project_NoticeReceive_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogNoticeReceiver objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.GetByNoticeReceiverId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the NoticeReceive_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="noticeReceiverId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogNoticeReceiver"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogNoticeReceiver})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogNoticeReceiver object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogNoticeReceiver)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogNoticeReceiver object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogNoticeReceiver object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogNoticeReceiver object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogNoticeReceiver)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogNoticeReceiver object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogNoticeReceiver object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogNoticeReceiverProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.OperationDetail"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="detailId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationDetail objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationDetail objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationDetail objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.GetByOptId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OperationLog_OperationDetail_FK key.
            	OperationLog_OperationDetail_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="optId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.OperationDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.GetByDetailId(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OperationDetail_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="detailId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.OperationDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.OperationDetail})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.OperationDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.OperationDetail)">
            <summary>
            	Inserts a BitAuto.Services.Entities.OperationDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.OperationDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.OperationDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.OperationDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.OperationDetail object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.OperationDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataValueRange"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataValueRange"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorDataValueRangeId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataValueRange objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataValueRange objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataValueRange objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataValueRange objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.GetByAuthorDataAclId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorDataValueRange_AuthorDataAcl key.
            	FK_AuthorDataValueRange_AuthorDataAcl Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataAclId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataValueRange objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.GetByAuthorDataValueRangeId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorDataValueRange index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataValueRangeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorDataValueRange"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.GetByAuthorDataAclIdDataValue(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorDataValueRange_Main index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataAclId"></param>
            <param name="dataValue"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorDataValueRange"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorDataValueRange})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataValueRange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataValueRange)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorDataValueRange object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataValueRange object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataValueRange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataValueRange)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataValueRange object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorDataValueRange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataValueRangeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResource"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorResourceId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResource objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResource objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResource objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorResource objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.GetByAuthorResourceId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorResource index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorResourceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResource"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.GetByResourceCode(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorResource_ResourceCode index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorResource"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.GetByResourceUrl(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorResource_ResourcePartialUrl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceUrl"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorResource})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResource)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorResource object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResource object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorResource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorResource)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorResource object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorResource object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoBase"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoBase"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoBase objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoBase objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoBase objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserInfoBase objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.GetByUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserInfoBase index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserInfoBase"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.GetByAttentionBrandId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserInfoBase_AttentionBrandId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="attentionBrandId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserInfoBase})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoBase object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoBase)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserInfoBase object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoBase object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserInfoBase object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserInfoBase)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserInfoBase object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserInfoBase object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoBaseProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataCategory"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataCategoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResource"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserGenderValue"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userGenderValueId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserGenderValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserGenderValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserGenderValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserGenderValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.GetByUserGenderValueId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserGenderValue index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userGenderValueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserGenderValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.GetByValueName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_UserGenderValue_ValueName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="valueName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserGenderValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserGenderValue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserGenderValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserGenderValue)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserGenderValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserGenderValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserGenderValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserGenderValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserGenderValue object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserGenderValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserAccount"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserAccount"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserAccount objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserAccount objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserAccount objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetByUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserAccount index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetByUserName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserAccount_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetByUserApplicationIdUserName(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_UserAccount_UserApplicationID_UserName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userApplicationId"></param>
            <param name="userName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetByCreateTime(BitAuto.Services.Dal.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserAccount_CreateTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="createTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.GetByLastChangeTime(BitAuto.Services.Dal.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_UserAccount_LastChangeTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="lastChangeTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserAccount})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserAccount)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserAccount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserAccount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserAccount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserAccount object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorRoleUser"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorRoleUserId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRoleUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRoleUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRoleUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorRoleUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetByAuthorRoleUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorRoleUser index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleUserId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorRoleUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetByAuthorRoleIdUserId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorRoleUser_AuthorRoleId_UserId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorRoleUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetByAuthorRoleId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorRoleUser_AuthorRoleId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.GetByUserId(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_AuthorRoleUser_UserId index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorRoleUser})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorRoleUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorRoleUser)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorRoleUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorRoleUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorRoleUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorRoleUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorRoleUser object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorRoleUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SsoWebsite"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SsoWebsite"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="ssoWebsiteId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SsoWebsite objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SsoWebsite objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SsoWebsite objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SsoWebsite objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.GetBySsoWebsiteId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SsoWebsite index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="ssoWebsiteId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SsoWebsite"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SsoWebsite})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SsoWebsite object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SsoWebsite)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SsoWebsite object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SsoWebsite object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SsoWebsite object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SsoWebsite)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SsoWebsite object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SsoWebsite object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSsoWebsiteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorRoleUser"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorRoleUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResourceType"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionTime"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionTimeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataAcl"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorDataAcl"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="authorDataAclId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetByResourceCode(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorDataAcl_AuthorResource key.
            	FK_AuthorDataAcl_AuthorResource Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetByAuthorDataCategoryId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorDataAcl_AuthorDataCategory key.
            	FK_AuthorDataAcl_AuthorDataCategory Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataCategoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetByAuthorRoleId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_AuthorDataAcl_AuthorRole key.
            	FK_AuthorDataAcl_AuthorRole Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorRoleId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.AuthorDataAcl objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetByAuthorDataAclId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AuthorDataAcl index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataAclId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorDataAcl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.GetByAuthorDataCategoryIdResourceCodeAuthorRoleId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_AuthorDataAcl_TripleIndex index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="authorDataCategoryId"></param>
            <param name="resourceCode"></param>
            <param name="authorRoleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.AuthorDataAcl"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.AuthorDataAcl})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataAcl)">
            <summary>
            	Inserts a BitAuto.Services.Entities.AuthorDataAcl object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataAcl object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.AuthorDataAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.AuthorDataAcl)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.AuthorDataAcl object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.AuthorDataAcl object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorDataAclProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogProcessRecord"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="processRecordId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProcessRecord objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProcessRecord objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProcessRecord objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProcessRecord objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.GetByExceptionInfoId(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ExceptionInfo_ModifyRecord_FK key.
            	ExceptionInfo_ModifyRecord_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="exceptionInfoId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProcessRecord objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.GetByProcessRecordId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ModifyRecord_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="processRecordId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogProcessRecord"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.GetByProcessTime(BitAuto.Services.Dal.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_SysLogProcessRecord_ProcessTime index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="processTime"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogProcessRecord})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogProcessRecord object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogProcessRecord)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogProcessRecord object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogProcessRecord object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogProcessRecord object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogProcessRecord)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogProcessRecord object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogProcessRecord object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlOperationLogProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.OperationLog"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationLogProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationLogProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserStatusValue"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserStatusValue"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="userStatusValueId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserStatusValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserStatusValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserStatusValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.UserStatusValue objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.GetByUserStatusValueId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_UserStatusValue index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="userStatusValueId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserStatusValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.GetByValueName(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ_UserStatusValue_ValueName index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="valueName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.UserStatusValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.UserStatusValue})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserStatusValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserStatusValue)">
            <summary>
            	Inserts a BitAuto.Services.Entities.UserStatusValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserStatusValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.UserStatusValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.UserStatusValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.UserStatusValue object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.UserStatusValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserStatusValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserGenderValue"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserGenderValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserApplication"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserApplicationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.CommunityUser"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="cmuId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.CommunityUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.CommunityUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.CommunityUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.CommunityUser objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.GetByCmuId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Community_User_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="cmuId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.CommunityUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.CommunityUser})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.CommunityUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.CommunityUser)">
            <summary>
            	Inserts a BitAuto.Services.Entities.CommunityUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.CommunityUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.CommunityUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.CommunityUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.CommunityUser object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.CommunityUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogProject"/> entity.
            </summary>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogProject"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.Delete(BitAuto.Services.Dal.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="projectId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.Find(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProject objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.Find(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Dal.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:BitAuto.Services.Dal.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProject objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.GetAll(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.GetPaged(BitAuto.Services.Dal.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProject objects.</returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.GetByResourceCode(BitAuto.Services.Dal.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the AuthorResource_SysLogProject_FK key.
            	AuthorResource_SysLogProject_FK Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="resourceCode"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BitAuto.Services.Entities.SysLogProject objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.GetByProjectId(BitAuto.Services.Dal.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Project_PK index.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="projectId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:BitAuto.Services.Entities.SysLogProject"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.BulkInsert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.TList{BitAuto.Services.Entities.SysLogProject})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.Insert(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogProject)">
            <summary>
            	Inserts a BitAuto.Services.Entities.SysLogProject object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogProject object to insert.</param>
            <remarks>
            	After inserting into the datasource, the BitAuto.Services.Entities.SysLogProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.Update(BitAuto.Services.Dal.TransactionManager,BitAuto.Services.Entities.SysLogProject)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:BitAuto.Services.Dal.TransactionManager"/> object</param>
            <param name="entity">BitAuto.Services.Entities.SysLogProject object to update.</param>
            <remarks>
            	After updating the datasource, the BitAuto.Services.Entities.SysLogProject object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProjectProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserWithCarValue"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserWithCarValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.AuthorResourceAcl"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlAuthorResourceAclProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:BitAuto.Services.Dal.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(BitAuto.Services.Dal.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(BitAuto.Services.Dal.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(BitAuto.Services.Dal.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(BitAuto.Services.Dal.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(BitAuto.Services.Dal.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteReader(BitAuto.Services.Dal.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(BitAuto.Services.Dal.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(BitAuto.Services.Dal.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteDataSet(BitAuto.Services.Dal.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(BitAuto.Services.Dal.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(BitAuto.Services.Dal.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ExecuteScalar(BitAuto.Services.Dal.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:BitAuto.Services.Dal.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorResourceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorResource"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorDataCategoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorDataCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataCategoryProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataCategoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorRoleProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorRole"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorRoleProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorRoleProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorResourceAclProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorResourceAcl"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceAclProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceAclProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogProjectProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogProject"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogProjectProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogProjectProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorResourceTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorResourceType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceTypeProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorResourceTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorDataValueRangeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorDataValueRange"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataValueRangeProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataValueRangeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.PersonalBaaInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.PersonalBaaInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlPersonalBaaInfoProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlPersonalBaaInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.OperationLogProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.OperationLog"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlOperationLogProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlOperationLogProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorRoleUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorRoleUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorRoleUserProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorRoleUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.CommunityUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.CommunityUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlCommunityUserProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlCommunityUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.BusiCodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.BusiCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlBusiCodeProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlBusiCodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.OperationDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.OperationDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlOperationDetailProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlOperationDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorWebsiteUrlProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorWebsiteUrl"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorWebsiteUrlProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorWebsiteUrlProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.BusiCodeSchemaProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.BusiCodeSchema"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlBusiCodeSchemaProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlBusiCodeSchemaProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SsoWebsiteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SsoWebsite"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSsoWebsiteProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSsoWebsiteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogEnumTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogEnumType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogEnumTypeProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogEnumTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogExceptionInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogExceptionInfoProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogExceptionInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogImportantPageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogImportantPage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogImportantPageProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogImportantPageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.AuthorDataAclProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.AuthorDataAcl"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataAclProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlAuthorDataAclProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogNoticeReceiverProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogNoticeReceiver"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogNoticeReceiverProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogNoticeReceiverProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogProcessRecordProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogProcessRecord"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogProcessRecordProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogProcessRecordProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SysLogExceptionTimeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionTime"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogExceptionTimeProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlSysLogExceptionTimeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserAccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserAccount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserAccountProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserApplicationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserApplication"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserApplicationProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserApplicationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserGenderValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserGenderValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserGenderValueProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserGenderValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserInfoBaseProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserInfoBase"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoBaseProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoBaseProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserInfoCommonProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserInfoCommon"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoCommonProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoCommonProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserInfoCoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserInfoCore"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoCoreProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserInfoCoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserStatusValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserStatusValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserStatusValueProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserStatusValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.UserWithCarValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:BitAuto.Services.Entities.UserWithCarValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserWithCarValueProvider">
            <summary>
            Gets the current <c cref="P:BitAuto.Services.Dal.SqlClient.SqlNetTiersProvider.SqlUserWithCarValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.UserInfoCommon"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlUserInfoCommonProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogImportantPage"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogImportantPageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogEnumType"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogEnumTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.OperationDetail"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlOperationDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.BusiCode"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlBusiCodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogProcessRecord"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogProcessRecordProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.SysLogExceptionInfo"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlSysLogExceptionInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:BitAuto.Services.Entities.CommunityUser"/> entity.
            </summary>
        </member>
        <member name="M:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:BitAuto.Services.Dal.SqlClient.SqlCommunityUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
